// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 effective-4.2 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name RaxelPulse
import CoreBluetooth
import CoreData
import CoreLocation
import CoreMotion
import Foundation
import Network
@_exported import RaxelPulse
import Swift
import UIKit
import UserNotifications
extension BRPRTLPoint {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.BRPRTLPoint>
  @objc @NSManaged dynamic public var accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var aDirect: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var aLateral: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var aVertical: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var course: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var direct: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gyrox: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gyroy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gyroz: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lateral: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var relationship: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension BRPRTLPoint {
  @objc(addRelationshipObject:) @NSManaged dynamic public func addToRelationship(_ value: RaxelPulse.BRPEPValue)
  @objc(removeRelationshipObject:) @NSManaged dynamic public func removeFromRelationship(_ value: RaxelPulse.BRPEPValue)
  @objc(addRelationship:) @NSManaged dynamic public func addToRelationship(_ values: Foundation.NSSet)
  @objc(removeRelationship:) @NSManaged dynamic public func removeFromRelationship(_ values: Foundation.NSSet)
}
@_inheritsConvenienceInitializers @objc(BRPRTLPoint) public class BRPRTLPoint : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension BRPOfflineTag {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.BRPOfflineTag>
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var source: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sourcetype: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.Bool {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPRTLPoint : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public func setup(accuracy: Swift.Double, course: Swift.Double, direct: Swift.Double, lateral: Swift.Double, latitude: Swift.Double, longitude: Swift.Double, speed: Swift.Double, timestamp: Swift.Double)
  public func toJSON() -> [Swift.String : Any]
  public func toBigJSON() -> [Swift.String : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BRPTrackPointProcessed) public class BRPTrackPointProcessed : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(RPLastKnownPointsHelper) public class RPLastKnownPointsHelper : ObjectiveC.NSObject {
  @objc public static func returnSwiftClassInstance() -> RaxelPulse.RPLastKnownPointsHelper
  @objc public func addLKPToTrack(value: [RaxelPulse.RPLKPoint], startDate: Foundation.Date, callResult: @escaping () -> Swift.Void)
  @objc public func getLKPToTrack(startDate: Foundation.Date, callResult: @escaping ([RaxelPulse.RPLKPoint]) -> Swift.Void)
  @objc public func clearLKPToTrack(startDate: Foundation.Date, callResult: @escaping () -> Swift.Void)
  @objc public func addPoints(value: [[Swift.String : Any]], startDate: Foundation.Date, callResult: @escaping () -> Swift.Void)
  @objc public func removePoints(startDate: Foundation.Date, callResult: @escaping () -> Swift.Void)
  @objc public func getPoints(startDate: Foundation.Date, callResult: @escaping ([[Swift.String : Any]]) -> Swift.Void)
  @objc public func addRPELMDevices(value: [[Swift.String : Swift.String]])
  @objc public func getRPELMDevices(callResult: @escaping ([[Swift.String : Swift.String]]) -> Swift.Void)
  @objc public func addRTLConfig(value: RaxelPulse.RPRealTimeConfig)
  @objc public func getRTLConfig(callResult: @escaping (RaxelPulse.RPRealTimeConfig) -> Swift.Void)
  @objc public func addShedulerItems(value: [[Swift.String : Swift.Int64]], type: Swift.String, day: ObjectiveC.NSInteger, callResult: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func deleteShedulerItems(type: Swift.String, callResult: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func getShedulerItems(type: Swift.String, callResult: @escaping ([[Swift.String : Swift.Int64]]) -> Swift.Void)
  @objc public func addRTLPoints(items: [RaxelPulse.RPRTLPoint])
  @objc public func removeRTLPoints(list: [Swift.Double])
  @objc public func removeRTLPoints(items: [RaxelPulse.RPRTLPoint])
  @objc public func getRTLPoints(callResult: @escaping ([RaxelPulse.RPRTLPoint]) -> Swift.Void)
  @objc public func addVI(items: [[Swift.String : Any]])
  @objc public func removeVIPoints(timestampS: Swift.Double, timestampE: Swift.Double)
  @objc public func getVIPoints(timestampS: Swift.Double, timestampE: Swift.Double) -> [[Swift.String : Any]]
  @objc public func addTrackHF(items: [[Swift.String : Any]])
  @objc public func addHF(items: [[Swift.String : Any]])
  @objc public func removeTrackHFPoints(timestampS: Swift.Double, timestampE: Swift.Double)
  @objc public func removeHFPoints(timestampS: Swift.Double, timestampE: Swift.Double)
  @objc public func getTrackHFPoints(timestampS: Swift.Double, timestampE: Swift.Double, callResult: @escaping ([[Swift.String : Any]]) -> Swift.Void)
  @objc public func getHFPoints(timestampS: Swift.Double, timestampE: Swift.Double) -> [[Swift.String : Any]]
  @objc public func appendLKPoint(items: [RaxelPulse.RPLKPoint])
  @objc public func checkTracks(items: [[Swift.String : Any]], callResult: @escaping ([Foundation.NSString]) -> Swift.Void)
  @objc public func addTracks(items: [RaxelPulse.RPTrackProcessed], needed: [[Swift.String : Any]], callResult: @escaping ([RaxelPulse.RPTrackProcessed]) -> Swift.Void)
  @objc public func getTracks(callResult: @escaping ([RaxelPulse.RPTrackProcessed]) -> Swift.Void)
  @objc public func getLKPoints() -> [RaxelPulse.RPLKPoint]
  public func removeEntity(item: RaxelPulse.RPLastKnownPoints, context: CoreData.NSManagedObjectContext)
  @objc public func addToBRPOTag(name: Swift.String?, source: Swift.String?, isRemove: Swift.Bool, isGet: Swift.Bool, callback: @escaping RaxelPulse.RPAPIITagCallback)
  @objc public func setup()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BRPEvent) public class BRPEvent : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BRPOfflineTag) public class BRPOfflineTag : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension BRPEventT {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.BRPEventT>
  @objc @NSManaged dynamic public var accelerationDirect: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationDirectEnd: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationLateral: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationLateralEnd: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationVertical: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationVerticalEnd: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var duration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitudeE: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitudeE: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var prevEventSpeed: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pureDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speedMedian: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speedStart: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speedStop: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStart: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accuracy: RaxelPulse.BRPEPValue? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rangeDirect: RaxelPulse.BRPEPValue? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rangeLateral: RaxelPulse.BRPEPValue? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rangeVertical: RaxelPulse.BRPEPValue? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: RaxelPulse.BRPEPValue? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(RPTrackLKPoints) public class RPTrackLKPoints : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(RPLKPoint) public class RPLKPoint : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func setup(latitude: Swift.Double, longitude: Swift.Double, accuracy: Swift.Double, pointDate: Swift.Int, pointOrigin: Swift.String)
  @objc public func toJSON() -> [Swift.String : Any]
  @objc deinit
}
extension RTConfig {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.RTConfig>
  @objc @NSManaged dynamic public var imei: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var odometer: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var port: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var protocolVal: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var queueLenght: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var server: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sfailcount: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sfailtimer: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speriod: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sradius: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ssendVolumePack: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tfailcount: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tfailtimer: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tperiod: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tradius: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tsendVolumePack: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var remote: Swift.Bool {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(BRPAddressParts) public class BRPAddressParts : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension RPLastKnownPoints {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.RPLastKnownPoints>
  @objc @NSManaged dynamic public var accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pointDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pointOrigin: Swift.String? {
    @objc get
    @objc set
  }
}
extension BRPTrackProcessed {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.BRPTrackProcessed>
  @objc @NSManaged dynamic public var accelerationCount: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressEnd: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressStart: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cityFinish: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cityStart: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dateUpdated: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var decelerationCount: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var distance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var duration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endDate: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var highOverSpeedMileage: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var midOverSpeedMileage: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var originChanged: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var phoneUsage: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rating: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rating100: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ratingAcceleration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ratingAcceleration100: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ratingBraking: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ratingBraking100: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ratingCornering: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ratingCornering100: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ratingPhoneUsage: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ratingPhoneUsage100: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ratingReason: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ratingSpeeding: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ratingSpeeding100: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ratingTimeOfDay: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shareType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startDate: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trackOriginCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trackToken: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressFinishParts: RaxelPulse.BRPAddressParts? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressStartParts: RaxelPulse.BRPAddressParts? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var points: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tags: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension BRPTrackProcessed {
  @objc(insertObject:inPointsAtIndex:) @NSManaged dynamic public func insertIntoPoints(_ value: RaxelPulse.BRPTrackPointProcessed, at idx: Swift.Int)
  @objc(removeObjectFromPointsAtIndex:) @NSManaged dynamic public func removeFromPoints(at idx: Swift.Int)
  @objc(insertPoints:atIndexes:) @NSManaged dynamic public func insertIntoPoints(_ values: [RaxelPulse.BRPTrackPointProcessed], at indexes: Foundation.NSIndexSet)
  @objc(removePointsAtIndexes:) @NSManaged dynamic public func removeFromPoints(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInPointsAtIndex:withObject:) @NSManaged dynamic public func replacePoints(at idx: Swift.Int, with value: RaxelPulse.BRPTrackPointProcessed)
  @objc(replacePointsAtIndexes:withPoints:) @NSManaged dynamic public func replacePoints(at indexes: Foundation.NSIndexSet, with values: [RaxelPulse.BRPTrackPointProcessed])
  @objc(addPointsObject:) @NSManaged dynamic public func addToPoints(_ value: RaxelPulse.BRPTrackPointProcessed)
  @objc(removePointsObject:) @NSManaged dynamic public func removeFromPoints(_ value: RaxelPulse.BRPTrackPointProcessed)
  @objc(addPoints:) @NSManaged dynamic public func addToPoints(_ values: Foundation.NSOrderedSet)
  @objc(removePoints:) @NSManaged dynamic public func removeFromPoints(_ values: Foundation.NSOrderedSet)
}
extension BRPTrackProcessed {
  @objc(insertObject:inTagsAtIndex:) @NSManaged dynamic public func insertIntoTags(_ value: RaxelPulse.BRPTags, at idx: Swift.Int)
  @objc(removeObjectFromTagsAtIndex:) @NSManaged dynamic public func removeFromTags(at idx: Swift.Int)
  @objc(insertTags:atIndexes:) @NSManaged dynamic public func insertIntoTags(_ values: [RaxelPulse.BRPTags], at indexes: Foundation.NSIndexSet)
  @objc(removeTagsAtIndexes:) @NSManaged dynamic public func removeFromTags(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInTagsAtIndex:withObject:) @NSManaged dynamic public func replaceTags(at idx: Swift.Int, with value: RaxelPulse.BRPTags)
  @objc(replaceTagsAtIndexes:withTags:) @NSManaged dynamic public func replaceTags(at indexes: Foundation.NSIndexSet, with values: [RaxelPulse.BRPTags])
  @objc(addTagsObject:) @NSManaged dynamic public func addToTags(_ value: RaxelPulse.BRPTags)
  @objc(removeTagsObject:) @NSManaged dynamic public func removeFromTags(_ value: RaxelPulse.BRPTags)
  @objc(addTags:) @NSManaged dynamic public func addToTags(_ values: Foundation.NSOrderedSet)
  @objc(removeTags:) @NSManaged dynamic public func removeFromTags(_ values: Foundation.NSOrderedSet)
}
@_inheritsConvenienceInitializers @objc(BRPEPValue) public class BRPEPValue : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension BRPshedulerItem {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.BRPshedulerItem>
  @objc @NSManaged dynamic public var start: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stop: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var day: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension RPTrackLKPoints {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.RPTrackLKPoints>
  @objc @NSManaged dynamic public var accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pointDate: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pointOrigin: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startdate: Swift.Int64 {
    @objc get
    @objc set
  }
}
extension BRPEPValue {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.BRPEPValue>
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var min: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var max: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var quantile_95: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var quantile_05: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var median: Swift.Double {
    @objc get
    @objc set
  }
}
extension BRPEvent {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.BRPEvent>
  @objc @NSManaged dynamic public var accelerationDirect: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationDirectEnd: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationLateral: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationLateralEnd: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationVertical: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationVerticalEnd: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var duration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitudeE: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitudeE: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var prevEventSpeed: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pureDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speedMedian: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speedStart: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speedStop: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStart: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accuracy: RaxelPulse.BRPEPValue? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rangeDirect: RaxelPulse.BRPEPValue? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rangeLateral: RaxelPulse.BRPEPValue? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rangeVertical: RaxelPulse.BRPEPValue? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: RaxelPulse.BRPEPValue? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(BRPVehicleIndicators) public class BRPVehicleIndicators : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BRPTags) public class BRPTags : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NSMutableAttributedString {
  public func trimCharacters(in characterSet: Foundation.CharacterSet)
}
@_inheritsConvenienceInitializers @objc(RPLastKnownPoints) public class RPLastKnownPoints : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension RPBPoint {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.RPBPoint>
  @objc @NSManaged dynamic public var acceleration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationX: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationXOriginal: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationY: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationYOriginal: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationZ: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accelerationZOriginal: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var course: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var deceleration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var establishedIndexA: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var establishedIndexB: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gyroX: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gyroXOriginal: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gyroY: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gyroYOriginal: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gyroZ: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gyroZOriginal: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var height: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var horizontalAccuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lateral: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var midSpeed: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var number: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pointDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qaxmax: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qaxmedian: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qaxmin: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qaxquantile05: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qaxquantile95: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qaymax: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qaymedian: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qaymin: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qayquantile05: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qayquantile95: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qazmax: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qazmedian: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qazmin: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qazquantile05: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qazquantile95: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgxmax: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgxmedian: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgxmin: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgxquantile05: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgxquantile95: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgymax: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgymedian: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgymin: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgyquantile05: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgyquantile95: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgzmax: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgzmedian: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgzmin: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgzquantile05: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var qgzquantile95: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startDate: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tickTimestamp: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalMeters: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var viacceleratorPedalPosition: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var viblockMask: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var viengineCoolantTemperature: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var viengineLoad: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vifuelConsumption: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vifuelLevel: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vifuelType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var viintakeAirTemperature: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vipids: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vireadTroubleCodes: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var virpm: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vivehicleMileage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vivehicleSpeed: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vivehicleToken: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vivehicleVoltage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vivin: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var viworkProtocol: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var yaw: Swift.Double {
    @objc get
    @objc set
  }
}
extension BRPTags {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.BRPTags>
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var source: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sourcetype: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tracks: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension BRPTags {
  @objc(addTracksObject:) @NSManaged dynamic public func addToTracks(_ value: RaxelPulse.BRPTrackProcessed)
  @objc(removeTracksObject:) @NSManaged dynamic public func removeFromTracks(_ value: RaxelPulse.BRPTrackProcessed)
  @objc(addTracks:) @NSManaged dynamic public func addToTracks(_ values: Foundation.NSSet)
  @objc(removeTracks:) @NSManaged dynamic public func removeFromTracks(_ values: Foundation.NSSet)
}
extension BRPAddressParts {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.BRPAddressParts>
  @objc @NSManaged dynamic public var city: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var country: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var countryCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var county: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var district: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var house: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var postalCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var street: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var etrackProcessed: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var strackProcessed: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension BRPAddressParts {
  @objc(addEtrackProcessedObject:) @NSManaged dynamic public func addToEtrackProcessed(_ value: RaxelPulse.BRPTrackProcessed)
  @objc(removeEtrackProcessedObject:) @NSManaged dynamic public func removeFromEtrackProcessed(_ value: RaxelPulse.BRPTrackProcessed)
  @objc(addEtrackProcessed:) @NSManaged dynamic public func addToEtrackProcessed(_ values: Foundation.NSSet)
  @objc(removeEtrackProcessed:) @NSManaged dynamic public func removeFromEtrackProcessed(_ values: Foundation.NSSet)
}
extension BRPAddressParts {
  @objc(addStrackProcessedObject:) @NSManaged dynamic public func addToStrackProcessed(_ value: RaxelPulse.BRPTrackProcessed)
  @objc(removeStrackProcessedObject:) @NSManaged dynamic public func removeFromStrackProcessed(_ value: RaxelPulse.BRPTrackProcessed)
  @objc(addStrackProcessed:) @NSManaged dynamic public func addToStrackProcessed(_ values: Foundation.NSSet)
  @objc(removeStrackProcessed:) @NSManaged dynamic public func removeFromStrackProcessed(_ values: Foundation.NSSet)
}
@_inheritsConvenienceInitializers @objc(RTConfig) public class RTConfig : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(RPTripConfig) public class RPTripConfig : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func toJSON() -> [Swift.String : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(RPSettings) public class RPSettings : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public static func returnInstance() -> RaxelPulse.RPSettings
  @objc public var appName: Swift.String
  @objc public var wizardBgColor: UIKit.UIColor
  @objc public var wizardMaintextColor: UIKit.UIColor
  @objc public var wizardAlertBackgroundColor: UIKit.UIColor
  @objc public var wizardAlertTextColor: UIKit.UIColor
  @objc public var wizardAlertButtonTextColor: UIKit.UIColor
  @objc public var wizardAlertActiveButtonTextColor: UIKit.UIColor
  @objc public var wizardAlertActiveButtonBgColor: UIKit.UIColor
  @objc public var wizardAlertCorners: CoreGraphics.CGFloat
  @objc public var wizardNextButtonBgColor: UIKit.UIColor
  @objc public var wizardNextButtonTextColor: UIKit.UIColor
  @objc public var wizardPages: [RaxelPulse.RPPageTexts]
  @objc public var wizardPagesText: Foundation.NSMutableDictionary
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(RPPermissionsWizard) public class RPPermissionsWizard : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func status() -> Swift.Bool
  @objc public static func returnInstance() -> RaxelPulse.RPPermissionsWizard
  @objc public func setupBluetoothEnabled()
  @objc public func setupHandlers(userNotificationResponce: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void, motionManagerResponce: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void, locationManagerResponce: @escaping (CoreLocation.CLAuthorizationStatus) -> Swift.Void)
  @objc public func iOSpermission() -> Swift.Bool
  @objc public static func isAllRequiredPermissionsGranted() -> Swift.Bool
  @objc public func launch(finish: @escaping (Swift.Bool) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(RPRTLUploader) public class RPRTLUploader : ObjectiveC.NSObject {
  @objc public static func returnInstance() -> RaxelPulse.RPRTLUploader
  @objc public func printRTLPoints(callResult: @escaping (Swift.String) -> Swift.Void)
  @objc public func uploadRTLPoints(points: [Any], callResult: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BRPELMDevice) public class BRPELMDevice : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension BRPTrackPointProcessed {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.BRPTrackPointProcessed>
  @objc @NSManaged dynamic public var alertType: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var alertValue: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cornering: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var phoneUsage: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speedLimit: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speedType: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tracks: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension BRPTrackPointProcessed {
  @objc(addTracksObject:) @NSManaged dynamic public func addToTracks(_ value: RaxelPulse.BRPTrackProcessed)
  @objc(removeTracksObject:) @NSManaged dynamic public func removeFromTracks(_ value: RaxelPulse.BRPTrackProcessed)
  @objc(addTracks:) @NSManaged dynamic public func addToTracks(_ values: Foundation.NSSet)
  @objc(removeTracks:) @NSManaged dynamic public func removeFromTracks(_ values: Foundation.NSSet)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(RPPageTexts) public class RPPageTexts : ObjectiveC.NSObject {
  @objc public var tryinlineButton: Swift.Bool
  @objc public init(pageText: Foundation.NSMutableAttributedString, alertText: Foundation.NSMutableAttributedString, buttonsText: [Foundation.NSMutableAttributedString], selected: Swift.Int)
  @objc public init(titleText: Foundation.NSMutableAttributedString, pageText: Foundation.NSMutableAttributedString, alertText: Foundation.NSMutableAttributedString, buttonsText: [Foundation.NSMutableAttributedString], selected: Swift.Int, controlButtonText: Foundation.NSMutableAttributedString)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class StorageTrackHelper : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(RPStopConfig) public class RPStopConfig : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func toJSON() -> [Swift.String : Any]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RPTlCoder : ObjectiveC.NSObject {
  public var url: Swift.String
  public var imei: Swift.String
  @objc public static func returnInstance() -> RaxelPulse.RPTlCoder
  public func makeTltnkData(dataDict: ([Swift.String : Any]), callback: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BRPTrackProcessed) public class BRPTrackProcessed : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BRPshedulerItem) public class BRPshedulerItem : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct WebSocketEvents {
  public var open: () -> ()
  public var close: (Swift.Int, Swift.String, Swift.Bool) -> ()
  public var error: (Swift.Error) -> ()
  public var message: (Any) -> ()
  public var pong: (Any) -> ()
  public var end: (Swift.Int, Swift.String, Swift.Bool, Swift.Error?) -> ()
}
public enum WebSocketBinaryType : Swift.CustomStringConvertible {
  case uInt8Array
  case nsData
  case uInt8UnsafeBufferPointer
  public var description: Swift.String {
    get
  }
  public static func == (a: RaxelPulse.WebSocketBinaryType, b: RaxelPulse.WebSocketBinaryType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum WebSocketReadyState : Swift.Int, Swift.CustomStringConvertible {
  case connecting = 0
  case open = 1
  case closing = 2
  case closed = 3
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct WebSocketCompression {
  public var on: Swift.Bool
  public var noContextTakeover: Swift.Bool
  public var maxWindowBits: Swift.Int
}
public struct WebSocketService : Swift.OptionSet {
  public typealias RawValue = Swift.UInt
  public init(rawValue value: Swift.UInt)
  public init(nilLiteral: ())
  public static var allZeros: RaxelPulse.WebSocketService {
    get
  }
  public var rawValue: Swift.UInt {
    get
  }
  public static var None: RaxelPulse.WebSocketService {
    get
  }
  public static var VoIP: RaxelPulse.WebSocketService {
    get
  }
  public static var Video: RaxelPulse.WebSocketService {
    get
  }
  public static var Background: RaxelPulse.WebSocketService {
    get
  }
  public static var Voice: RaxelPulse.WebSocketService {
    get
  }
  public typealias ArrayLiteralElement = RaxelPulse.WebSocketService
  public typealias Element = RaxelPulse.WebSocketService
}
public enum WebSocketError : Swift.Error, Swift.CustomStringConvertible {
  case memory
  case needMoreInput
  case invalidHeader
  case invalidAddress
  case network(Swift.String)
  case libraryError(Swift.String)
  case payloadError(Swift.String)
  case protocolError(Swift.String)
  case invalidResponse(Swift.String)
  case invalidCompressionOptions(Swift.String)
  public var description: Swift.String {
    get
  }
  public var details: Swift.String {
    get
  }
}
@objc public protocol WebSocketDelegate {
  @objc func webSocketOpen()
  @objc func webSocketClose(_ code: Swift.Int, reason: Swift.String, wasClean: Swift.Bool)
  @objc func webSocketError(_ error: Foundation.NSError)
  @objc optional func webSocketMessageText(_ text: Swift.String)
  @objc optional func webSocketMessageData(_ data: Foundation.Data)
  @objc optional func webSocketPong()
  @objc optional func webSocketEnd(_ code: Swift.Int, reason: Swift.String, wasClean: Swift.Bool, error: Foundation.NSError?)
}
@objc @_inheritsConvenienceInitializers open class WebSocket : ObjectiveC.NSObject {
  convenience public init(_ url: Swift.String)
  convenience public init(url: Foundation.URL)
  convenience public init(_ url: Swift.String, subProtocols: [Swift.String])
  convenience public init(_ url: Swift.String, subProtocol: Swift.String)
  public init(request: Foundation.URLRequest, subProtocols: [Swift.String] = [])
  @objc convenience override dynamic public init()
  open var url: Swift.String {
    get
  }
  open var subProtocol: Swift.String {
    get
  }
  open var compression: RaxelPulse.WebSocketCompression {
    get
    set
  }
  open var allowSelfSignedSSL: Swift.Bool {
    get
    set
  }
  open var services: RaxelPulse.WebSocketService {
    get
    set
  }
  open var event: RaxelPulse.WebSocketEvents {
    get
    set
  }
  open var eventQueue: Dispatch.DispatchQueue? {
    get
    set
  }
  open var binaryType: RaxelPulse.WebSocketBinaryType {
    get
    set
  }
  open var readyState: RaxelPulse.WebSocketReadyState {
    get
  }
  open func open(_ url: Swift.String)
  open func open(nsurl url: Foundation.URL)
  open func open(_ url: Swift.String, subProtocols: [Swift.String])
  open func open(_ url: Swift.String, subProtocol: Swift.String)
  open func open(request: Foundation.URLRequest, subProtocols: [Swift.String] = [])
  open func open()
  open func close(_ code: Swift.Int = 1000, reason: Swift.String = "Normal Closure")
  open func send(_ message: Any)
  open func ping(_ message: Any)
  open func ping()
  @objc deinit
}
public func == (lhs: RaxelPulse.WebSocket, rhs: RaxelPulse.WebSocket) -> Swift.Bool
extension WebSocket {
  public var delegate: RaxelPulse.WebSocketDelegate? {
    get
    set
  }
  @objc dynamic public func send(text: Swift.String)
  @objc dynamic public func send(data: Foundation.Data)
}
extension BRPELMDevice {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.BRPELMDevice>
  @objc @NSManaged dynamic public var vehicleToken: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var uuid: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var companyId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var menufacturer: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var model: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mac: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var softwareVersion: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(RPRealTimeConfig) public class RPRealTimeConfig : ObjectiveC.NSObject {
  @objc public static func returnInstance() -> RaxelPulse.RPRealTimeConfig
  @objc override dynamic public init()
  @objc public func toJSON() -> [Swift.String : Any]
  @objc public func setConfig(config: [Swift.String : Any])
  public func saveCanfig()
  @objc public func getConfig() -> [Swift.String : Any]
  @objc public func setDataInterval(period_trip: Swift.UInt32, period_stop: Swift.UInt32)
  @objc public func setDataRadius(radius_trip: Swift.UInt32, radius_stop: Swift.UInt32)
  @objc public func setProtocol(protocol_: Swift.Int)
  @objc public func setServer(adr: Swift.String, port: Swift.String)
  @objc public func setSendVolumePack(size_trip: Swift.UInt32, size_stop: Swift.UInt32)
  @objc public func setOdometer(km: Swift.Double)
  @objc public func getOdometer() -> Swift.Double
  @objc public func setQueueLenght(lenght: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BRPEventT) public class BRPEventT : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(RPBPoint) public class RPBPoint : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NSAttributedString {
  public func trimmingCharacters(in characterSet: Foundation.CharacterSet) -> Foundation.NSAttributedString
}
@_inheritsConvenienceInitializers @available(iOS 12.0, *)
@objc(RPNetworkMonitor) public class NetworkMonitor : ObjectiveC.NSObject {
  @objc public var networkstatusW: Swift.Bool
  @objc public var networkstatusC: Swift.Bool
  @objc public var armed: Swift.Bool
  @objc public func arm()
  @objc public static func returnSwiftClassInstance() -> RaxelPulse.NetworkMonitor
  @objc public func networkStatus() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension BRPVehicleIndicators {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RaxelPulse.BRPVehicleIndicators>
  @objc @NSManaged dynamic public var acceleratorPedalPosition: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var blockMask: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var engineCoolantTemperature: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var engineLoad: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var fuelConsumption: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var fuelLevel: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var fuelType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var intakeAirTemperature: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pids: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var readTroubleCodes: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rpm: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vehicleMileage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vehicleSpeed: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vehicleToken: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vehicleVoltage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vin: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var workProtocol: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(RPRTLManager) public class RPRTLManager : ObjectiveC.NSObject {
  @objc public func setLogCallback(value: @escaping (Swift.String) -> Swift.Void)
  @objc public static func returnInstance() -> RaxelPulse.RPRTLManager
  @objc public func setIMEI(value: Swift.String)
  @objc public func setActive(status: Swift.Bool)
  @objc public func addRTLPoints(items: [CoreLocation.CLLocation], status: Swift.Bool, aDirect: Swift.Double, aLateral: Swift.Double, aVertical: Swift.Double, gyroX: Swift.Double, gyroY: Swift.Double, gyroZ: Swift.Double, callback: @escaping (Swift.Bool) -> Swift.Void, callbackBudge: @escaping (Swift.Bool) -> Swift.Void)
  public func getRTLPoints(callResult: @escaping ([RaxelPulse.RPRTLPoint]) -> Swift.Void)
  @objc public func addVIPoints(vhclIndicators: [[Swift.String : Any]])
  @objc public func addHFPoints(hfEvents: [[Swift.String : Any]])
  @objc override dynamic public init()
  @objc deinit
}
extension RaxelPulse.WebSocketBinaryType : Swift.Equatable {}
extension RaxelPulse.WebSocketBinaryType : Swift.Hashable {}
extension RaxelPulse.WebSocketReadyState : Swift.Equatable {}
extension RaxelPulse.WebSocketReadyState : Swift.Hashable {}
extension RaxelPulse.WebSocketReadyState : Swift.RawRepresentable {}
